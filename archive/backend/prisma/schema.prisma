generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model course {
  id          Int          @id @default(autoincrement())
  tag         String       @unique
  name        String?
  groups      group[]
  assignments assignment[]
}

model assignment {
  id           Int          @id @default(autoincrement())
  name         String
  dueDate      DateTime?
  courseId     Int?
  course       course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  repositories repository[]
}

model group {
  id             Int          @id @default(autoincrement())
  githubLink     String
  blackboardLink String?
  repositories   repository[]
  course         course?      @relation(fields: [courseId], references: [id])
  courseId       Int?
}

model repository {
  id           Int         @id @default(autoincrement())
  githubLink   String
  groupId      Int?
  assignmentId Int?
  assignment   assignment? @relation(fields: [assignmentId], references: [id])
  group        group?      @relation(fields: [groupId], references: [id])
  reports      report[]
}

model analyzer {
  id                Int                @id @default(autoincrement())
  name              String
  createdBy         String
  metricDefinitions metric_definition[]
  reports           report[]
}

model metric_definition {
  id               Int       @id @default(autoincrement())
  keyName          String
  valueType        String
  displayName      String?
  extendedMetadata Json?
  analyzer         analyzer? @relation(fields: [analyzerId], references: [id])
  analyzerId       Int?
}

model report {
  id           Int         @id @default(autoincrement())
  timestamp    DateTime    @default(now())
  report       Json
  analyzer     analyzer?   @relation(fields: [analyzerId], references: [id])
  analyzerId   Int?
  repository   repository? @relation(fields: [repositoryId], references: [id])
  repositoryId Int?
}
